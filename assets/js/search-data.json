{
  
    
        "post0": {
            "title": "Integral Numérica - Método de Simpson Composto",
            "content": "M&#233;todo de Simpson Composto . A regra de Simpson baseia-se em aproximar a integral definida pela área sob arcos de parábola que interpolam a função. Origem: Wikipédia . . Formula&#231;&#227;o do M&#233;todo . n intervalos igualmente espaçados . OBS:A medida que o valor de n aumenta a integração de f(x) tente ao valor real $$h = dfrac{x_m - x_0}{n}$$ . $$ int_{a}^{b} f(x) ,dx approx dfrac{1}{3}h {[f(x_0) + f(x_m)] +4[f(x_1)+ $$ $$ f(x_3) + dots + f(x_{m-1})] + 2[f(x_2) + f(x_4)+ dots + f(x_{m-2}) ] }$$ . ou . $${ displaystyle { begin{aligned} int _{a}^{b}f(x) ,dx&amp; approx { frac {h}{3}} sum _{j=1}^{n/2}{ big [}f(x_{2j-2})+4f(x_{2j-1})+f(x_{2j}){ big ]} &amp;={ frac {h}{3}}{ bigg [}f(x_{0})+2 sum _{j=1}^{n/2-1}f(x_{2j})+4 sum _{j=1}^{n/2}f(x_{2j-1})+f(x_{n}){ bigg ]}, end{aligned}}}$$ . . Implementa&#231;&#227;o do Algor&#237;timo em Python . Biblioteca Python . Importando a Biblioteca Python que será usada no código . import numpy as np . C&#243;digo Python . Código para integração numérica usando o Método de Simpson Composto. . Onde: . $[x_0]$ Limite inferior | $[x_m]$ Limite superior | $[ f ]$ função que será integrada | $[ n ]$ sub-intervalos - OBS:Tem que ser um valor PAR | . def metodo_simpson(f, x_0, x_m, n): # O passo de integração, n é a quantidade de subintervalos que queremos # veridicando se [n] é PAR, condição necessária para o método simpson if (n%2 != 0): n -= 1 h = (x_m - x_0)/ float(n) f_x0 = f(x_0) f_xm = f(x_m) x = x_0 x += h index = 1 somatorio = 0.0 while (x &lt; x_m): if (index%2 != 0): somatorio += 4*f(x) else: somatorio += 2*f(x) index += 1 x += h integral = (h /3.0)*(f_x0 + f_xm + somatorio) print(&quot; n*************************** SAÍDA *************************** n&quot;) print(f&quot; tIntegral ≈ {integral}&quot;) print(f&quot; tSubintervalos [n] = {n}&quot;) print(f&quot; tPasso [h] = {h}&quot;) print(f&quot; tLimite Inferior [x_0] = {x_0}&quot;) print(f&quot; tLimite Superior [x_m] = {x_m}&quot;) print(&quot; n ************************* n&quot;) . . Exemplo 01: Solu&#231;&#227;o da integral . Aplicando o Método de Simpsom Composto ao exemplo abaixo: . $$ int_{x_0}^{x_m} 2x-e^x ,dx$$ . $$ int_{-1}^{2} 2x-e^x ,dx approx dfrac{1}{3}h {[2x_0-e^{x_0} + 2x_m-e^{x_m}] + $$ . $$4[2x_1-e^{x_1} + 2x_3-e^{x_3} + dots + 2x_{m-1}-e^{x_{m-1}}] + $$ . $$2[2x_2-e^{x_2} + 2x_4-e^{x_4}+ dots + 2x_{m-2}-e^{x_{m-2}} ] }$$ . . C&#243;digo . f = lambda x: 2*x-np.exp(x) # Resolvendo a integral usando o método de simpson composto x_0 = 0; x_m = 2; n = 10 metodo_simpson(f, x_0, x_m, n) . *************************** SAÍDA *************************** Integral ≈ -2.840986767759475 Subintervalos [n] = 10 Passo [h] = 0.2 Limite Inferior [x_0] = 0 Limite Superior [x_m] = 2 ************************* . . Exemplo 02: Solu&#231;&#227;o da integral . Aplicando o Método de Simpsom Composto ao exemplo abaixo: . $$ int_{a}^{b} cos(x) ,dx$$ . $$ int_{a}^{b} 2x-e^x ,dx approx dfrac{1}{3}h {[cos(x_0) + cos(x_m)] + $$ . $$4[cos(x_1) + cos(x_3) + dots + cos(x_{m-1})] + $$ . $$2[cos(x_2) + cos(x_4)+ dots + cos(x_{m-2}) ] }$$ . . C&#243;digo . f = lambda x: np.cos(x) # Resolvendo a integral usando o método de simpson composto x_0 = 0; x_m = 2; n = 10 metodo_simpson(f, x_0, x_m, n) . *************************** SAÍDA *************************** Integral ≈ 0.85381930324762 Subintervalos [n] = 10 Passo [h] = 0.2 Limite Inferior [x_0] = 0 Limite Superior [x_m] = 2 ************************* . . Exemplo 03: Solu&#231;&#227;o da integral . Aplicando o Método de Simpsom Composto ao exemplo abaixo: . $$ int_{a}^{b} x^2 ,dx$$ . $$ int_{a}^{b} x^2 ,dx approx dfrac{1}{3}h {[x_0^2 + x_m^2] + 4[x_1^2 + x_3^2 + dots + x_{m-1}^2] + $$ . $$2[x_2^2 + x_4^2 + dots + x_{m-2}^2 ] }$$ . . C&#243;digo . f = lambda x: x**2 # Resolvendo a integral usando o método de simpson composto x_0 = 0; x_m = 2; n = 10 metodo_simpson(f, x_0, x_m, n) . *************************** SAÍDA *************************** Integral ≈ 3.2 Subintervalos [n] = 10 Passo [h] = 0.2 Limite Inferior [x_0] = 0 Limite Superior [x_m] = 2 ************************* .",
            "url": "https://oseiasdfarias.github.io/jupyter-notebooks/jupyter/calculo%20numerico/python/2022/02/25/integral-numerica-simpson-composto.html",
            "relUrl": "/jupyter/calculo%20numerico/python/2022/02/25/integral-numerica-simpson-composto.html",
            "date": " • Feb 25, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Integral Numérica - Método do Trapézio Composto",
            "content": "M&#233;todo do Trap&#233;zio Composto . Regra dos Trap&#233;zios &#8211; Defini&#231;&#245;es . Numericamente a regra dos trapézios é obtida aproximando-se f por um polinômio interpolador de 1° grau. | Em seguida calcula-se a área do trapézio cuja base está sobre o eixo dos x. | . . Origem: Pag(12) . Regra dos Trapézios – Dedução da Fórmula . Teorema . Se f for uma função continua em (a, b) onde a é o limite inferior de integração e b o limite superior de integração, A regra do Trapézio composta que podemos usar para aproximar $ int_{a}^{b} f(x) ,dx $ é dada por: . n intervalos – intervalos igualmente espaçados . $$h = dfrac{b-a}{n}$$ . $$ int_{a}^{b} f(x) ,dx approx dfrac{1}{2}h(f(a) + 2[f(x_1) + f(x_2) + dots + f(x_{n-1})] + f(b))$$ . . . Implementa&#231;&#227;o do Algor&#237;timo em Python . Biblioteca Python . Importando as Biblioteca Python que será usada no código . import numpy as np . C&#243;digo Python . Código para integração numérica usando o Método do Trapézio. . Onde: . [a] Limite inferior | [b] Limite superior | [n] sub-intervalos | [f ] função que será integrada | . def integ_trap(f, a, b, n): # O passo de integração, n é a quantidade de subintervalos que queremos h = (b-a)/ float(n) f_a = f(a) x = a x += h somatorio = 0.0 while (x &lt; b): somatorio += 2*f(x) x += h f_b = f(b) integral_trap = (h /2.0)*(f_a + somatorio + f_b) print(f&quot;Integral Trapézio ≈ {integral_trap}&quot;) . . Teste 1 . Aplicando o Método do Trapézio ao exemplo abaixo: . $$ int_{0}^{2} cos(x) ,dx$$ . $$ int_{a}^{b} cos(x) ,dx approx dfrac{1}{2}h(cos(x) + 2[cos(x_1) + cos(x_2) + dots + cos(x_{n-1})] + cos(b))$$ . . f = lambda x: np.cos(x) # Aplicando a integral usando o método do trapézio a = 0; b = 2; n = 100000 integ_trap(f, a, b, n) . Integral Trapézio ≈ 0.9092891038599877 . . Teste 2 . Aplicando o Método do Trapézio ao exemplo abaixo: . $$ int_{-1}^{2} 2 e^x ,dx$$ . $$ int_{a}^{b} 2 e^x ,dx approx dfrac{1}{2}h(2 e^a + 2[2 e^{x_1} + 2 e^{x_2} + dots + 2 e^x_{n-1}] + 2 e^b)$$ . . f = lambda x: 2*x-np.exp(x) # Aplicando a integral usando o método do trapézio a = -1; b = 2; n = 10000 integ_trap(f, a, b, n) . Integral Trapézio ≈ -4.0221934272473705 . . Teste 3 . Aplicando o Método do Trapézio ao exemplo abaixo: . $$ int_{0}^{6} x^2 ,dx$$ . $$ int_{a}^{b} x^2 ,dx approx dfrac{1}{2}h(a^2 + 2[x_1^2 + x_2^2 + dots + x_{n-1}^2] + b^2)$$ . . f = lambda x: x**2 # Aplicando a integral usando o método do trapézio a = 0; b = 6; n = 1000 integ_trap(f, a, b, n) . Integral Trapézio ≈ 72.00003599999896 .",
            "url": "https://oseiasdfarias.github.io/jupyter-notebooks/jupyter/2022/02/23/integral-numerica-trapezio-composto.html",
            "relUrl": "/jupyter/2022/02/23/integral-numerica-trapezio-composto.html",
            "date": " • Feb 23, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Sobre",
          "content": "Acadêmico de Engenharia Elétrica | Machine Learning &amp; Deep Learning | Python | Drone UAVs | .",
          "url": "https://oseiasdfarias.github.io/jupyter-notebooks/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://oseiasdfarias.github.io/jupyter-notebooks/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}